# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = Category | CategoryAggregator | CategoryConnection | CategoryConnectionCreated_at | CategoryConnectionDescription | CategoryConnectionId | CategoryConnectionPhoto | CategoryConnectionPublished_at | CategoryConnectionSlug | CategoryConnectionTitle | CategoryConnectionUpdated_at | CategoryGroupBy | I18NLocale | Products | ProductsAggregator | ProductsAggregatorAvg | ProductsAggregatorMax | ProductsAggregatorMin | ProductsAggregatorSum | ProductsConnection | ProductsConnectionCategory | ProductsConnectionCreated_at | ProductsConnectionDescription | ProductsConnectionId | ProductsConnectionInStock | ProductsConnectionIntroText | ProductsConnectionOfficialPage | ProductsConnectionPrice | ProductsConnectionPublished_at | ProductsConnectionSlug | ProductsConnectionTitle | ProductsConnectionUpdated_at | ProductsGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreated_at | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdated_at | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserGroupBy | createCategoryPayload | createProductPayload | createRolePayload | createUserPayload | deleteCategoryPayload | deleteFilePayload | deleteProductPayload | deleteRolePayload | deleteUserPayload | updateCategoryPayload | updateProductPayload | updateRolePayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type Category {
    created_at: DateTime!
    description: String
    id: ID!
    photo: UploadFile
    published_at: DateTime
    slug: String!
    title: String!
    updated_at: DateTime!
}

type CategoryAggregator {
    count: Int
    totalCount: Int
}

type CategoryConnection {
    aggregate: CategoryAggregator
    groupBy: CategoryGroupBy
    values: [Category]
}

type CategoryConnectionCreated_at {
    connection: CategoryConnection
    key: DateTime
}

type CategoryConnectionDescription {
    connection: CategoryConnection
    key: String
}

type CategoryConnectionId {
    connection: CategoryConnection
    key: ID
}

type CategoryConnectionPhoto {
    connection: CategoryConnection
    key: ID
}

type CategoryConnectionPublished_at {
    connection: CategoryConnection
    key: DateTime
}

type CategoryConnectionSlug {
    connection: CategoryConnection
    key: String
}

type CategoryConnectionTitle {
    connection: CategoryConnection
    key: String
}

type CategoryConnectionUpdated_at {
    connection: CategoryConnection
    key: DateTime
}

type CategoryGroupBy {
    created_at: [CategoryConnectionCreated_at]
    description: [CategoryConnectionDescription]
    id: [CategoryConnectionId]
    photo: [CategoryConnectionPhoto]
    published_at: [CategoryConnectionPublished_at]
    slug: [CategoryConnectionSlug]
    title: [CategoryConnectionTitle]
    updated_at: [CategoryConnectionUpdated_at]
}

type I18NLocale {
    code: String
    created_at: DateTime!
    id: ID!
    name: String
    updated_at: DateTime!
}

type Mutation {
    createCategory(input: createCategoryInput): createCategoryPayload
    createProduct(input: createProductInput): createProductPayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    deleteProduct(input: deleteProductInput): deleteProductPayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateCategory(input: updateCategoryInput): updateCategoryPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updateProduct(input: updateProductInput): updateProductPayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Products {
    category: Category
    created_at: DateTime!
    description: String
    id: ID!
    inStock: Boolean!
    introText: String
    officialPage: String
    photo(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
    price: Float!
    published_at: DateTime
    slug: String!
    title: String!
    updated_at: DateTime!
}

type ProductsAggregator {
    avg: ProductsAggregatorAvg
    count: Int
    max: ProductsAggregatorMax
    min: ProductsAggregatorMin
    sum: ProductsAggregatorSum
    totalCount: Int
}

type ProductsAggregatorAvg {
    price: Float
}

type ProductsAggregatorMax {
    price: Float
}

type ProductsAggregatorMin {
    price: Float
}

type ProductsAggregatorSum {
    price: Float
}

type ProductsConnection {
    aggregate: ProductsAggregator
    groupBy: ProductsGroupBy
    values: [Products]
}

type ProductsConnectionCategory {
    connection: ProductsConnection
    key: ID
}

type ProductsConnectionCreated_at {
    connection: ProductsConnection
    key: DateTime
}

type ProductsConnectionDescription {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionId {
    connection: ProductsConnection
    key: ID
}

type ProductsConnectionInStock {
    connection: ProductsConnection
    key: Boolean
}

type ProductsConnectionIntroText {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionOfficialPage {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionPrice {
    connection: ProductsConnection
    key: Float
}

type ProductsConnectionPublished_at {
    connection: ProductsConnection
    key: DateTime
}

type ProductsConnectionSlug {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionTitle {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionUpdated_at {
    connection: ProductsConnection
    key: DateTime
}

type ProductsGroupBy {
    category: [ProductsConnectionCategory]
    created_at: [ProductsConnectionCreated_at]
    description: [ProductsConnectionDescription]
    id: [ProductsConnectionId]
    inStock: [ProductsConnectionInStock]
    introText: [ProductsConnectionIntroText]
    officialPage: [ProductsConnectionOfficialPage]
    price: [ProductsConnectionPrice]
    published_at: [ProductsConnectionPublished_at]
    slug: [ProductsConnectionSlug]
    title: [ProductsConnectionTitle]
    updated_at: [ProductsConnectionUpdated_at]
}

type Query {
    categories(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Category]
    categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
    category(id: ID!, publicationState: PublicationState): Category
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    product(id: ID!, publicationState: PublicationState): Products
    products(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Products]
    productsConnection(limit: Int, sort: String, start: Int, where: JSON): ProductsConnection
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
    alternativeText: String
    caption: String
    created_at: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updated_at: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileGroupBy {
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    created_at: [UploadFileConnectionCreated_at]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updated_at: [UploadFileConnectionUpdated_at]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleGroupBy {
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    created_at: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updated_at: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserGroupBy {
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    created_at: [UsersPermissionsUserConnectionCreated_at]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updated_at: [UsersPermissionsUserConnectionUpdated_at]
    username: [UsersPermissionsUserConnectionUsername]
}

type createCategoryPayload {
    category: Category
}

type createProductPayload {
    product: Products
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteCategoryPayload {
    category: Category
}

type deleteFilePayload {
    file: UploadFile
}

type deleteProductPayload {
    product: Products
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateCategoryPayload {
    category: Category
}

type updateProductPayload {
    product: Products
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum PublicationState {
    LIVE
    PREVIEW
}

input CategoryInput {
    created_by: ID
    description: String
    photo: ID
    published_at: DateTime
    slug: String!
    title: String!
    updated_by: ID
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input LocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input ProductInput {
    category: ID
    created_by: ID
    description: String
    inStock: Boolean
    introText: String
    officialPage: String
    photo: [ID]
    price: Float
    published_at: DateTime
    slug: String!
    title: String!
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createCategoryInput {
    data: CategoryInput
}

input createProductInput {
    data: ProductInput
}

input createRoleInput {
    data: RoleInput
}

input createUserInput {
    data: UserInput
}

input deleteCategoryInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deleteProductInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editCategoryInput {
    created_by: ID
    description: String
    photo: ID
    published_at: DateTime
    slug: String
    title: String
    updated_by: ID
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editLocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input editProductInput {
    category: ID
    created_by: ID
    description: String
    inStock: Boolean
    introText: String
    officialPage: String
    photo: [ID]
    price: Float
    published_at: DateTime
    slug: String
    title: String
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateCategoryInput {
    data: editCategoryInput
    where: InputID
}

input updateProductInput {
    data: editProductInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload